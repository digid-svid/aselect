<?php
// $Id$

/**
 * @file aselect.module
 *   Implement ASelect support for Drupal.
 *
 * @author Raymond Jelierse
 */

/**
 * Key for new ASelect identities
 */
define('ASELECT_NEW_IDENTITY', 'aselect_new');

/**
 * Implements hook_menu()
 */
function aselect_menu () {
  $items = array();
  // 403 Landing page
  $items['aselect/unauthorized'] = array(
    'title' => t('Unauthorized access'),
    'page callback' => 'aselect_unauthorized_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['aselect/landing'] = array(
    'title' => 'ASelect forwarder',
    'page callback' => 'aselect_login_forward',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );

  // Prepare ASelect SSO
  $items['aselect/prepare'] = array(
    'title' => 'ASelect login',
    'page callback' => 'aselect_login_prepare',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK
  );

  // Landing page after authentication.
  $items['aselect/check'] = array(
    'title' => 'ASelect authenticate',
    'page callback' => 'aselect_login_check',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK
  );

  // Settings page.
  $items['admin/settings/aselect'] = array(
    'title' => 'ASelect',
    'description' => 'Set options for ASelect login.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array ('aselect_settings_form'),
    'access arguments' => array ('administer aselect')
  );

  return $items;
}

/**
 * Implements hook_perm()
 */
function aselect_perm () {
  return array (
    'administer aselect',
    'view aselect identities',
    'edit aselect identities',
  );
}

/**
 * Implements hook_theme()
 */
function aselect_theme() {
  return array(
    'aselect_identities_table' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Implements hook_user()
 */
function aselect_user ($op, &$edit, &$account, $category = 'account') {
  switch ($op) {
    case 'form':
      return aselect_user_form($account, $category);

    case 'validate':
      aselect_user_form_validate(&$edit);
      dpm($edit, 'user-edit-validate');
      break;

    case 'submit':
      aselect_user_form_submit(&$edit);
      dpm($edit, 'user-edit-submit');
      break;

    case 'load':
      if ($GLOBALS['user']->uid === $account->uid) {
        $account->aselect = aselect_get_attributes();
      }
      break;

    case 'logout':
      // Remove login information for this domain
      setcookie ('aselectuid', FALSE, 0, '/');
      unset ($_COOKIE['aselectuid']);
      setcookie ('aselectattributes', FALSE, 0, '/');
      unset ($_COOKIE['aselectattributes']);
      setcookie ('aselectorganization', FALSE, 0, '/');
      unset ($_COOKIE['aselectorganization']);
      setcookie ('aselectticket', FALSE, 0, '/');
      unset ($_COOKIE['aselectticket']);
      // Kill ASelect session
      $logout_path = url('login/', array('absolute' => TRUE, 'query' => array('request' => 'aselect_kill_ticket'), 'base_url' => 'http://' . $_SERVER['HTTP_HOST']));
      drupal_goto($logout_path);
      break;

    case 'view':
      if (user_access('view aselect identities')) {
        $identities = aselect_get_identities($account);
        if (!empty($identities)) {
          $account->content['aselect'] = array(
            '#type' => 'user_profile_category',
            '#title' => t('ASelect identities'),
            'identities' => array(
              '#type' => 'markup',
              '#value' => theme('item_list', $identities),
            ),
          );
        }
      }
  }
}

/**
 * Implements hook_form_alter()
 *
 * Add 'Log in with ASelect' link to user_login and user_login_blocks forms.
 */
function aselect_form_alter (&$form, $form_state, $form_id) {
  global $user;

  if ($form_id == 'user_login_block' || $form_id == 'user_login') {
    $items = array ();
    $items[] = l(t('Log in with ASelect'), 'aselect/prepare', array ('attributes' => array ('title' => t('Log in using your ASelect identity.'))));
    $form['aselect_links'] = array (
    '#value' => theme ('item_list', $items),
    '#weight' => 1
    );
  }
}

/**
 * Implements hook_menu_alter()
 *
 *   - Remove 'user/password' if configured to do so.
 *   - Forward 'user' to ASelect login, alias 'user/login' with 'user/signin'.
 */
function aselect_menu_alter(&$items) {
  if (variable_get('aselect_disable_password_reset', FALSE)) {
    $items['user/password']['access callback'] = FALSE;
  }

  if (variable_get('aselect_disable_user_link', TRUE)) {
    // Assure user/login is still accessible
    $items['user/login'] += array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('user_login'),
        'type' => MENU_CALLBACK,
    );
    path_set_alias('user/login', 'user/signin');
    // Reroute user to the ASelect Login.
    $items['user'] = array(
        'title' => 'ASelect login',
        'page callback' => 'aselect_login_prepare',
        'access callback' => 'user_is_anonymous',
        'type' => MENU_CALLBACK,
    );
  }
}

/**
 * Performs checks to see which actions are needed before a user can view
 * the page that has been set in $_GET[destination] and acts accordingly.
 */
function aselect_login_forward() {
  if (isset($_GET['destination'])) {
    $path = $_GET['destination'];
    $item = menu_get_item($path);
    if ($item === FALSE) {
      drupal_set_message(t('The path supplied does not exist.'), 'error');
      drupal_goto();
    }
    elseif ($item['access']) {
      drupal_goto($path);
    }
    elseif (user_is_anonymous()) {
      $login_path = url('aselect/prepare', array('query' => array('destination' => $path)));
      drupal_goto($login_path);
    }
    else {
      drupal_set_message(t('You do not have permissions to view this page.'), 'error');
      drupal_goto();
    }
  }
  else {
    drupal_goto();
  }
}

/**
 * Prepares the environment for starting an ASelect session.
 *  - Sets a return path for after the authentication process.
 *  - Looks up the location of this module and sets the path
 *    to the ASelect agent.
 *  - Sends the user to the ASelect agent.
 *
 */
function aselect_login_prepare() {
  $query = array();
  if (isset($_GET['destination'])) {
    $return_path = $_GET['destination'];
    if (user_is_logged_in() && menu_valid_path(array('link_path' => $return_path))) {
      drupal_goto($return_path);
    }
    $query['destination'] = $return_path;
  }
  // Returns the absolute URL to the postprocessing function
  // for the ASelect login.
  $return_path = url('aselect/check', array('absolute' => TRUE, 'query' => $query));

  // Appearantly the A-Select filter malfunctions on any path that ends in
  // /login, except for the root /login
  // Kind of strange that it still hijacks all paths regardless.
  // Also, this requires us to install files outside of the sites-dir.
  $login_path = url('login', array('absolute' => TRUE, 'base_url' => 'http://' . $_SERVER['HTTP_HOST']));

  // Set a cookie for the external files, so it knows where to redirect to.
  setcookie('aselectreturnpath', $return_path, 0, '/', $_SERVER['HTTP_HOST']);

  // Work the magic.
  drupal_goto($login_path);
}

/**
 * This function handles the landing page after the user has logged on with
 * ASelect. It checks for the correct cookies and parses the attributes that may
 * have been sent along.
 */
function aselect_login_check () {
  if (empty($_COOKIE['aselectuid'])) {
    drupal_set_message(t('ASelect login was cancelled.'), 'message');
    drupal_goto();
    return;
  }

  $attributes = aselect_get_attributes();

  // Get the configuration value for the matching token.
  $token = variable_get('aselect_login_token', 'aselectuid');

  // Get the identity of the user.
  $identity = user_external_load($attributes[$token]);
  // Fallback to aselectuid if required.
  if ($identity === 0 && $token != 'aselectuid' && variable_get('aselect_fallback_aselectuid', TRUE)) {
    $identity = user_external_load($attributes['aselectuid']);
  }

  // Load the user profile based on the matched identity.
  if (is_object($identity)) {
    $identity->aselectuid = $attributes['aselectuid'];
    if (user_external_login($identity)) {
      drupal_set_message(t('Login successful.'));
    }
  }
  // Create a new user when no match is found.
  elseif (variable_get('aselect_create_new_user_if_unmatched', FALSE)) {
    drupal_set_message(t('Could not find a matching user. A new account will be created.'));
    user_external_login_register($attributes['aselectuid'], 'aselect');
    $uid = $GLOBALS['user']->uid;
    $query = array();
    if (isset($_GET['destination'])) {
      $query['destination'] = $_GET['destination'];
    }
    drupal_set_message(t('Please update the profile that has been created for you. At least enter an e-mail address so you can be contacted.'));
    $edit_path = url("user/$uid/edit", array('query' => $query));
    drupal_goto("user/$uid/edit", $query);
  }
  // Fallback to a defined user when no match found.
  elseif (variable_get('aselect_fallback_uid', 0) > 0) {
    $account = new stdObject();
    $account->uid = variable_get('aselect_fallback_uid', 0);
    drupal_set_message(t('Could not find a matching user. Logged in as elevated guest.'));
    user_external_login($account);
  }
  // Login failed.
  else {
    drupal_set_message(t('The credentials provided could not be matched to an (existing) user. Login failed.'), 'error');
  }

  if (isset($_GET['destination'])) {
    $return_path = $_GET['destination'];
    if (menu_valid_path(array('link_path' => $return_path))) {
      drupal_goto($return_path);
    }
  }

  drupal_goto();
}

/**
 * ASelect module settings form.
 */
function aselect_settings_form() {
  $form = array(
    'aselect_login' => array(
      '#type' => 'fieldset',
      '#title' => t('Authentication'),
      'aselect_login_token' => array(
        '#type' => 'textfield',
        '#title' => t('ASelect token'),
        '#default_value' => variable_get('aselect_login_token', 'aselectuid'),
        '#maxlength' => 128,
        '#description' => t('The token to match ASelect logins against using the AuthMap information. By default this is the uid returned by ASelect, but you might want to use one of the custom attributes returned by ASelect instead.'),
        '#required' => TRUE
      ),
      'aselect_fallback_aselectuid' => array(
        '#type' => 'checkbox',
        '#title' => t('Fallback to ASelect UID when the above token does not match.'),
        '#default_value' => variable_get('aselect_fallback_aselectuid', TRUE),
      ),
      'aselect_fallback_uid' => array(
        '#type' => 'textfield',
        '#title' => t('Fallback Drupal User ID'),
        '#default_value' => variable_get('aselect_fallback_uid', 0),
        '#description' => t('Use this Drupal user to fallback to if a matching user could not be found.'),
        '#required' => TRUE,
      ),
      'aselect_create_new_user_if_unmatched' => array(
        '#type' => 'checkbox',
        '#title' => t('Create a new user if no match is found.'),
        '#default_value' => variable_get('aselect_create_new_user_if_unmatched', FALSE),
        '#description' => t('When no existing user could be matched, create a new Drupal user.'),
      ),
    ),
    'aselect_user' => array(
      '#type' => 'fieldset',
      '#title' => t('User management'),
      'aselect_disable_user_link' => array(
        '#type' => 'checkbox',
        '#title' => t('Forward %path to ASelect login', array('%path' => 'user')),
        '#default_value' => variable_get('aselect_disable_user_link', TRUE),
      ),
      'aselect_disable_password_reset' => array(
        '#type' => 'checkbox',
        '#title' => t('Disable password reset for Drupal users'),
        '#default_value' => variable_get('aselect_disable_password_reset', FALSE),
        '#description' => t('Disable the password reset page, effectively removing the option for a Drupal user to reset it\'s password. This can be useful if you want to enforce external login.'),
      ),
    ),
  );

  return system_settings_form($form);
}

/**
 * Get a list of attributes that have been set by the ASelect Agent after the
 * user has successfully authenticated.
 *
 * @return
 *   The attributes that are available from the ASelect Agent after login.
 */
function aselect_get_attributes() {
  $attributes = array();
  if (empty($_COOKIE['aselectuid'])) {
    return $attributes;
  }

  // Add the ASelect UID to the attributes-list, for easier processing.
  $attributes['aselectuid'] = $_COOKIE['aselectuid'];

  // Parse other attributes provided by the ASelect Agent.
  $attr = explode(',', $_COOKIE['aselectattributes']);

  if (!is_array($attr)) {
    return $attributes;
  }

  foreach ($attr as $attribute) {
    $list = explode('=', $attribute);
    $attributes[$list[0]] = $list[1];
  }

  return $attributes;
}

/**
 * Handler for the Drupal Unauthorized page.
 *
 * @return
 *   The message to the user.
 */
function aselect_unauthorized_page() {
  if (user_is_anonymous()) {
    // Build the url for login.
    $return_path = str_replace(base_path(), '', $_SERVER['HTTP_REFERER']);
    if (!empty($return_path)) {
      $query = array('return_path' => $return_path);
    }
    else {
      $query = array();
    }
    $link = url('aselect/prepare', array('query' => $query));

    return sprintf('<p>%s</p>', t('You need to <a href="@aselect-url">log in</a> to access this page.', array('@aselect-url' => $link)));
  }
  else {
    return sprintf('<p>%s</p>', t('You are not authorized to access this page.'));
  }
}

/**
 * Get the ASelect identities that are available for the user given in $account.
 *
 * @param $account
 *   The user for which to look up the current ASelect identities.
 * @return
 *   An array of ASelect identities.
 */
function aselect_get_identities($account) {
  $result = db_query("SELECT authname, module FROM {authmap} WHERE module LIKE 'aselect%' AND uid = %d", $account->uid);
  if ($result === FALSE) {
    return FALSE;
  }

  $authnames = array();

  while (($identity = db_fetch_array($result)) !== FALSE) {
    $authnames[$identity['module']] = $identity['authname'];
  }

  return $authnames;
}

/**
 * User edit form for ASelect related information for the given $account.
 *
 * @param $account
 *   The account to edit
 * @param $category
 *   The category that is being edited
 * @return
 *   The form with ASelect user settings
 */
function aselect_user_form($account, $category = 'account') {
  if ($category === 'account' && user_access('edit aselect identities')) {
    $identities = aselect_get_identities($account);

    $form = array(
      'aselect_identities' => array(
        '#type' => 'fieldset',
        '#title' => t('ASelect identities'),
        '#description' => t('List of avaialble ASelect identities. Selected identities will be removed when the account is saved. You can add a new identity using the last row of the table.'),
        '#theme' => 'aselect_identities_table',
      ),
    );

    $authmaps = array();

    // List existing identities
    foreach ($identities as $authfield => $authname) {
      list($module, $identity) = explode('_', $authfield, 2);
      $authmaps[$authfield] = '';
      // ASelect identity name
      $form['aselect_identities']['identity'][$authfield] = array(
        '#value' => $identity,
      );
      // ASelect identity value
      $form['aselect_identities']['authname'][$authfield] = array(
        '#type' => 'textfield',
        '#default_value' => $authname,
      );
    }

    $form['aselect_identities']['authmap_remove'] = array(
      '#type' => 'checkboxes',
      '#options' => $authmaps,
    );

    // Fields to add new identity
    $form['aselect_identities'][ASELECT_NEW_IDENTITY . '_identity'] = array(
      '#type' => 'textfield',
      '#size' => 40,
      '#weight' => 50,
    );
    $form['aselect_identities'][ASELECT_NEW_IDENTITY . '_authname'] = array(
      '#type' => 'textfield',
      '#size' => 40,
      '#weight' => 50,
    );

    return $form;
  }
  else {
    return array();
  }
}

/**
 * Validate the user input for the ASelect user settings
 *
 * @param $form_state
 *   The current state of the edit form
 */
function aselect_user_form_validate(&$form_state) {
  $form_state['authmap_remove'] = array_filter($form_state['authmap_remove']);
  // Merge new identity into ASelect authmap, if set
  if (!empty($form_state[ASELECT_NEW_IDENTITY . '_identity'])) {
    if (preg_match('#^([A-Za-z0-9_]+)$#', $form_state[ASELECT_NEW_IDENTITY . '_identity'])) {
      if (!empty($form_state[ASELECT_NEW_IDENTITY . '_authname'])) {
        $form_state['aselect_' . $form_state[ASELECT_NEW_IDENTITY . '_identity']] = $form_state[ASELECT_NEW_IDENTITY . '_authname'];
        // Clean up $edit
        unset($form_state[ASELECT_NEW_IDENTITY . '_identity']);
        unset($form_state[ASELECT_NEW_IDENTITY . '_authname']);
      }
      else {
        form_set_error(ASELECT_NEW_IDENTITY . '_authname', t('The ASelect identity cannot be empty. Please enter a value for the identity.'));
      }
    }
    else {
      form_set_error(ASELECT_NEW_IDENTITY . '_identity', t('Illegal characters in the name of the new ASelect identity. The name is restricted to alphanumeric characters and underscores only.'));
    }
  }
}

/**
 * Prepare the edit form data for saving to the user
 *
 * @param $form_state
 *   The current state of the edit form
 */
function aselect_user_form_submit(&$form_state) {
  // Update results to set new authmaps
  foreach ($form_state as $name => $value) {
    if (substr($name, 0, 7) === 'aselect' && substr($name, 0, strlen(ASELECT_NEW_IDENTITY)) !== ASELECT_NEW_IDENTITY) {
      $form_state['auth_' . $name] = $value;
      // Clean up $edit
      unset($form_state[$name]);
    }
  }
  // Set selected authmaps for removal
  foreach ($form_state['authmap_remove'] as $authfield) {
    $form_state['auth_' . $authfield] = FALSE;
  }
}

/**
 * Theme the fieldset that contains the ASelect identities
 *
 * @param $form
 *   The fieldset
 * @return
 *   The themed fieldset
 */
function theme_aselect_identities_table($form) {
  $header = array(
    theme('table_select_header_cell'),
    t('Identity name'),
    t('Identitiy'),
  );
  $rows = array();

  if (isset($form['identity']) && is_array($form['identity'])) {
    foreach (element_children($form['identity']) as $authfield) {
      $form['identity'][$authfield]['#size'] = 40;
      $form['authname'][$authfield]['#size'] = 40;
      $rows[] = array(
        drupal_render($form['authmap_remove'][$authfield]),
        drupal_render($form['identity'][$authfield]),
        drupal_render($form['authname'][$authfield]),
      );
    }
  }

  $rows[] = array(
    '',
    drupal_render($form[ASELECT_NEW_IDENTITY . '_identity']),
    drupal_render($form[ASELECT_NEW_IDENTITY . '_authname']),
  );

  $output  = theme('table', $header, $rows);
  $output .= drupal_render($form);

  return $output;
}